"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Migrate = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _command = _interopRequireWildcard(require("@oclif/command"));

var _config = _interopRequireDefault(require("@percy/config"));

var _logger = _interopRequireDefault(require("@percy/logger"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Migrate extends _command.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "log", (0, _logger.default)('cli:config:migrate'));
  }

  async run() {
    let config;
    let {
      args: {
        filepath: input,
        output
      },
      flags: {
        'dry-run': dry
      }
    } = this.parse();

    try {
      ({
        config,
        filepath: input
      } = _config.default.search(input));
    } catch (error) {
      this.log.error(error);
      this.exit(1);
    }

    if (config) {
      this.log.info(`Found config file: ${_path.default.relative('', input)}`);
      output = output ? _path.default.resolve(output) : input;
    } else {
      this.log.error('Config file not found');
      this.exit(1);
    } // if migrating versions, warn when latest


    if (input === output && config.version === 2) {
      this.log.warn('Config is already the latest version');
      return;
    } // migrate config


    this.log.info('Migrating config file...');
    let format = _path.default.extname(output).replace(/^./, '') || 'yaml';

    let migrated = _config.default.migrate(config); // prefer kebab-case for yaml


    if (/^ya?ml$/.test(format)) {
      migrated = _config.default.normalize(migrated, {
        kebab: true
      });
    } // stringify to the desired format


    let body = _config.default.stringify(format, migrated);

    if (!dry) {
      let content = body; // update the package.json entry by requiring it and modifying it

      if (_path.default.basename(output) === 'package.json') {
        let pkg = JSON.parse(_fs.default.readFileSync(output));
        content = _config.default.stringify(format, { ...pkg,
          percy: migrated
        }); // rename input if it is the output
      } else if (input === output) {
        let old = input.replace(_path.default.extname(input), '.old$&');

        _fs.default.renameSync(input, old);
      } // write to output


      _fs.default.writeFileSync(output, content);
    }

    this.log.info('Config file migrated!'); // when dry-running, print config to stdout when finished

    if (dry) _logger.default.stdout.write('\n' + body);
  }

}

exports.Migrate = Migrate;

_defineProperty(Migrate, "description", 'Migrate a Percy config file to the latest version');

_defineProperty(Migrate, "args", [{
  name: 'filepath',
  description: 'current config filepath, detected by default'
}, {
  name: 'output',
  description: 'new config filepath to write to, defaults to FILEPATH'
}]);

_defineProperty(Migrate, "flags", {
  'dry-run': _command.flags.boolean({
    char: 'd',
    description: 'prints the new config rather than writing it'
  })
});

_defineProperty(Migrate, "examples", ['$ percy config:migrate', '$ percy config:migrate --dry-run', '$ percy config:migrate ./config/percy.yml', '$ percy config:migrate .percy.yml .percy.js']);
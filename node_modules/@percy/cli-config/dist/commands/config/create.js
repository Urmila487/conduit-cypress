"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Create = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _command = _interopRequireWildcard(require("@oclif/command"));

var _config = _interopRequireDefault(require("@percy/config"));

var _logger = _interopRequireDefault(require("@percy/logger"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const FILETYPES = ['rc', 'yaml', 'yml', 'json', 'js'];

class Create extends _command.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "log", (0, _logger.default)('cli:config:create'));
  }

  async run() {
    var _FILETYPES$find;

    let {
      flags,
      args
    } = this.parse();

    _logger.default.loglevel('info'); // discern the filetype


    let filetype = args.filepath ? _path.default.extname(args.filepath).replace(/^./, '') : (_FILETYPES$find = FILETYPES.find(t => flags[t])) !== null && _FILETYPES$find !== void 0 ? _FILETYPES$find : 'yml'; // validate the filetype for filepaths

    if (!FILETYPES.includes(filetype)) {
      this.log.error(`Unsupported filetype: ${filetype}`);
      return this.exit(1);
    } // discern the appropriate filename


    let filepath = args.filepath || {
      rc: '.percyrc',
      yaml: '.percy.yaml',
      yml: '.percy.yml',
      json: '.percy.json',
      js: '.percy.js'
    }[filetype]; // validate the file does not already exist

    if (_fs.default.existsSync(filepath)) {
      this.log.error(`Percy config already exists: ${filepath}`);
      return this.exit(1);
    } // discern the file format


    let format = ['rc', 'yaml', 'yml'].includes(filetype) ? 'yaml' : filetype; // write stringified default config options to the filepath

    _fs.default.writeFileSync(filepath, _config.default.stringify(format));

    this.log.info(`Created Percy config: ${filepath}`);
  }

}

exports.Create = Create;

_defineProperty(Create, "description", 'Create a Percy config file');

_defineProperty(Create, "flags", {
  rc: _command.flags.boolean({
    description: 'create a .percyrc file',
    exclusive: FILETYPES.filter(t => t !== 'rc')
  }),
  yaml: _command.flags.boolean({
    description: 'create a .percy.yaml file',
    exclusive: FILETYPES.filter(t => t !== 'yaml')
  }),
  yml: _command.flags.boolean({
    description: 'create a .percy.yml file',
    exclusive: FILETYPES.filter(t => t !== 'yml')
  }),
  json: _command.flags.boolean({
    description: 'create a .percy.json file',
    exclusive: FILETYPES.filter(t => t !== 'json')
  }),
  js: _command.flags.boolean({
    description: 'create a .percy.js file',
    exclusive: FILETYPES.filter(t => t !== 'js')
  })
});

_defineProperty(Create, "args", [{
  name: 'filepath',
  description: 'config filepath'
}]);

_defineProperty(Create, "examples", ['$ percy config:create', '$ percy config:create --yaml', '$ percy config:create --json', '$ percy config:create --js', '$ percy config:create --rc', '$ percy config:create ./config/percy.yml']);
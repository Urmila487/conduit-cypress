"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Upload = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _cliCommand = _interopRequireWildcard(require("@percy/cli-command"));

var _logger = _interopRequireDefault(require("@percy/logger"));

var _globby = _interopRequireDefault(require("globby"));

var _imageSize = _interopRequireDefault(require("image-size"));

var _client = _interopRequireDefault(require("@percy/client"));

var _resources = _interopRequireDefault(require("../resources"));

var _config = require("../config");

var _package = _interopRequireDefault(require("../../package.json"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const ALLOWED_IMAGE_TYPES = /\.(png|jpg|jpeg)$/i;

class Upload extends _cliCommand.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "log", (0, _logger.default)('cli:upload'));
  }

  async run() {
    if (!this.isPercyEnabled()) {
      this.log.info('Percy is disabled. Skipping upload');
      return;
    }

    let {
      dirname
    } = this.args;

    if (!_fs.default.existsSync(dirname)) {
      return this.error(`Not found: ${dirname}`);
    } else if (!_fs.default.lstatSync(dirname).isDirectory()) {
      return this.error(`Not a directory: ${dirname}`);
    }

    let {
      upload: {
        files,
        ignore
      }
    } = this.percyrc();
    ignore = [].concat(ignore).filter(Boolean);
    let paths = await (0, _globby.default)(files, {
      cwd: dirname,
      ignore
    });
    paths.sort();

    if (!paths.length) {
      return this.error(`No matching files found in '${dirname}'`);
    } else if (this.flags['dry-run']) {
      return this.log.info(`Matching files:\n${paths.join('\n')}`);
    } // we already have assets so we don't need asset discovery from @percy/core,
    // we can use @percy/client directly to send snapshots


    this.client = new _client.default({
      clientInfo: `${_package.default.name}/${_package.default.version}`
    });
    let {
      data: build
    } = await this.client.createBuild();
    build.number = build.attributes['build-number'];
    build.url = build.attributes['web-url'];
    this.build = build;
    this.log.info('Percy has started!');
    this.log.info(`Created build #${build.number}: ${build.url}`);

    for (let name of paths) {
      this.log.debug(`Uploading snapshot: ${name}`); // only snapshot supported images

      if (!name.match(ALLOWED_IMAGE_TYPES)) {
        this.log.info(`Skipping unsupported image type: ${name}`);
        continue;
      }

      let filepath = _path.default.resolve(dirname, name);

      let buffer = _fs.default.readFileSync(filepath);

      let {
        width,
        height
      } = (0, _imageSize.default)(filepath);
      await this.client.sendSnapshot(build.id, {
        // width and height is clamped to API min and max
        widths: [Math.max(10, Math.min(width, 2000))],
        minHeight: Math.max(10, Math.min(height, 2000)),
        resources: (0, _resources.default)(name, buffer, width, height),
        name
      });
      this.log.info(`Snapshot uploaded: ${name}`);
    }
  } // Finalize the build when finished


  async finally() {
    var _this$build;

    if ((_this$build = this.build) !== null && _this$build !== void 0 && _this$build.id) {
      await this.client.finalizeBuild(this.build.id);
      this.log.info(`Finalized build #${this.build.number}: ${this.build.url}`);
    }
  }

}

exports.Upload = Upload;

_defineProperty(Upload, "description", 'Upload a directory of images to Percy');

_defineProperty(Upload, "args", [{
  name: 'dirname',
  description: 'directory of images to upload',
  required: true
}]);

_defineProperty(Upload, "flags", { ..._cliCommand.flags.logging,
  ..._cliCommand.flags.config,
  files: _cliCommand.flags.string({
    char: 'f',
    multiple: true,
    description: 'one or more globs matching image file paths to upload',
    default: _config.schema.upload.properties.files.default,
    percyrc: 'upload.files'
  }),
  ignore: _cliCommand.flags.string({
    char: 'i',
    multiple: true,
    description: 'one or more globs matching image file paths to ignore',
    percyrc: 'upload.ignore'
  }),
  'dry-run': _cliCommand.flags.boolean({
    char: 'd',
    description: 'prints a list of matching images to upload without uploading'
  })
});

_defineProperty(Upload, "examples", ['$ percy upload ./images']);
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Exec = void 0;

var _cliCommand = _interopRequireWildcard(require("@percy/cli-command"));

var _core = _interopRequireDefault(require("@percy/core"));

var _logger = _interopRequireDefault(require("@percy/logger"));

var _crossSpawn = _interopRequireDefault(require("cross-spawn"));

var _which = _interopRequireDefault(require("which"));

var _flags = _interopRequireDefault(require("../../flags"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Exec extends _cliCommand.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "log", (0, _logger.default)('cli:exec'));
  }

  async run() {
    var _this$percy;

    let {
      argv
    } = this.parse(Exec);
    let command = argv.shift(); // validate the passed command

    if (!command) {
      this.log.error('You must supply a command to run after --');
      this.log.info('Example:');
      this.log.info('$ percy exec -- echo "run your test suite"');
      return this.exit(1);
    } else if (!_which.default.sync(command, {
      nothrow: true
    })) {
      this.log.error(`Error: command not found "${command}"`);
      return this.exit(127);
    } // set environment parallel total for `n` parallel builds (use with build:finalize)


    if (this.flags.parallel && !process.env.PERCY_PARALLEL_TOTAL) {
      process.env.PERCY_PARALLEL_TOTAL = '-1';
    } // set environment partial build flag


    if (this.flags.partial) {
      process.env.PERCY_PARTIAL_BUILD = '1';
    } // attempt to start percy if enabled


    if (this.isPercyEnabled()) {
      try {
        this.percy = await _core.default.start({
          port: this.flags.port,
          ...this.percyrc()
        });
      } catch (err) {
        this.log.info(`Skipping visual tests - ${err.message}`);
      }

      this.log.info(`Running "${[command].concat(argv).join(' ')}"`);
    } // provide SDKs with useful env vars


    let env = {
      PERCY_SERVER_ADDRESS: (_this$percy = this.percy) === null || _this$percy === void 0 ? void 0 : _this$percy.address(),
      PERCY_LOGLEVEL: _logger.default.loglevel(),
      ...process.env
    }; // run the passed command async

    let status = await new Promise((resolve, reject) => {
      (0, _crossSpawn.default)(command, argv, {
        stdio: 'inherit',
        env
      }).on('error', reject).on('close', resolve);
    }); // forward status code

    if (status) {
      this.exit(status);
    }
  } // Called on error, interupt, or after running


  async finally(error) {
    var _this$percy2;

    await ((_this$percy2 = this.percy) === null || _this$percy2 === void 0 ? void 0 : _this$percy2.stop(!!error));
  }

}

exports.Exec = Exec;

_defineProperty(Exec, "description", 'Start and stop Percy around a supplied command');

_defineProperty(Exec, "strict", false);

_defineProperty(Exec, "flags", { ..._cliCommand.flags.logging,
  ..._cliCommand.flags.discovery,
  ..._cliCommand.flags.config,
  ..._flags.default,
  parallel: _cliCommand.flags.boolean({
    description: 'marks the build as one of many parallel builds'
  }),
  partial: _cliCommand.flags.boolean({
    description: 'marks the build as a partial build'
  })
});

_defineProperty(Exec, "examples", ['$ percy exec -- echo "percy is running around this echo command"', '$ percy exec -- yarn test']);
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Start = void 0;

var _cliCommand = _interopRequireWildcard(require("@percy/cli-command"));

var _core = _interopRequireDefault(require("@percy/core"));

var _logger = _interopRequireDefault(require("@percy/logger"));

var _flags = _interopRequireDefault(require("../../flags"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Start extends _cliCommand.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "log", (0, _logger.default)('cli:exec:start'));
  }

  async run() {
    if (!this.isPercyEnabled()) {
      this.log.info('Percy has been disabled. Not starting');
      return;
    }

    let percy = await _core.default.start({
      port: this.flags.port,
      ...this.percyrc()
    }); // only stop when terminated

    let stop = () => percy.stop(true);

    process.on('SIGHUP', stop);
    process.on('SIGINT', stop);
    process.on('SIGTERM', stop);
  }

}

exports.Start = Start;

_defineProperty(Start, "description", 'Starts a local Percy snapshot server');

_defineProperty(Start, "flags", { ..._cliCommand.flags.logging,
  ..._cliCommand.flags.discovery,
  ..._cliCommand.flags.config,
  ..._flags.default
});

_defineProperty(Start, "examples", ['$ percy exec:start', '$ percy exec:start &> percy.log']);
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Stop = void 0;

var _cliCommand = _interopRequireWildcard(require("@percy/cli-command"));

var _request = _interopRequireDefault(require("@percy/client/dist/request"));

var _logger = _interopRequireDefault(require("@percy/logger"));

var _flags = _interopRequireDefault(require("../../flags"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Stop extends _cliCommand.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "log", (0, _logger.default)('cli:exec:stop'));
  }

  async run() {
    let {
      port
    } = this.flags;

    if (!this.isPercyEnabled()) {
      this.log.info('Percy is disabled');
      return;
    }

    try {
      await (0, _request.default)(`http://localhost:${port}/percy/stop`, {
        method: 'POST'
      });
    } catch (err) {
      this.log.error('Percy is not running');
      this.log.debug(err);
      this.exit(1);
    } // retry heathcheck until it fails


    await new Promise(function check(resolve) {
      return (0, _request.default)(`http://localhost:${port}/percy/healthcheck`, {
        method: 'GET'
      }).then(() => setTimeout(check, 100, resolve)).catch(resolve);
    });
    this.log.info('Percy has stopped');
  }

}

exports.Stop = Stop;

_defineProperty(Stop, "description", 'Stops a local running Percy snapshot server');

_defineProperty(Stop, "flags", { ..._cliCommand.flags.logging,
  ..._flags.default
});
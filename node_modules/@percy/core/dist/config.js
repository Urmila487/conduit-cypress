"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.migration = migration;
exports.getSnapshotConfig = getSnapshotConfig;
exports.schema = void 0;

var _assert = require("assert");

var _normalize = require("@percy/config/dist/normalize");

var _utils = require("./utils");

// Common options used in Percy commands
const schema = {
  snapshot: {
    type: 'object',
    additionalProperties: false,
    properties: {
      widths: {
        type: 'array',
        items: {
          type: 'integer'
        },
        default: [375, 1280]
      },
      minHeight: {
        type: 'integer',
        default: 1024
      },
      percyCSS: {
        type: 'string',
        default: ''
      },
      enableJavaScript: {
        type: 'boolean'
      }
    }
  },
  discovery: {
    type: 'object',
    additionalProperties: false,
    properties: {
      allowedHostnames: {
        type: 'array',
        items: {
          type: 'string'
        },
        default: []
      },
      networkIdleTimeout: {
        type: 'integer',
        default: 100
      },
      disableCache: {
        type: 'boolean'
      },
      requestHeaders: {
        type: 'object',
        additionalProperties: {
          type: 'string'
        }
      },
      authorization: {
        type: 'object',
        additionalProperties: false,
        properties: {
          username: {
            type: 'string'
          },
          password: {
            type: 'string'
          }
        }
      },
      cookies: {
        anyOf: [{
          type: 'object',
          additionalProperties: {
            type: 'string'
          }
        }, {
          type: 'array',
          items: {
            type: 'object',
            required: ['name', 'value'],
            properties: {
              name: {
                type: 'string'
              },
              value: {
                type: 'string'
              }
            }
          }
        }]
      },
      userAgent: {
        type: 'string'
      },
      concurrency: {
        type: 'integer'
      },
      launchOptions: {
        type: 'object',
        additionalProperties: false,
        properties: {
          executable: {
            type: 'string'
          },
          timeout: {
            type: 'integer'
          },
          args: {
            type: 'array',
            items: {
              type: 'string'
            }
          },
          headless: {
            type: 'boolean'
          }
        }
      }
    }
  }
}; // Migration function

exports.schema = schema;

function migration(config, {
  map,
  del,
  log
}) {
  /* eslint-disable curly */
  if (config.version < 2) {
    // discovery options have moved
    map('agent.assetDiscovery.allowedHostnames', 'discovery.allowedHostnames');
    map('agent.assetDiscovery.networkIdleTimeout', 'discovery.networkIdleTimeout');
    map('agent.assetDiscovery.cacheResponses', 'discovery.disableCache', v => !v);
    map('agent.assetDiscovery.requestHeaders', 'discovery.requestHeaders');
    map('agent.assetDiscovery.pagePoolSizeMax', 'discovery.concurrency');
    del('agent');
  } else {
    // snapshot discovery options have moved
    for (let k of ['authorization', 'requestHeaders']) {
      var _config$snapshot;

      if ((_config$snapshot = config.snapshot) !== null && _config$snapshot !== void 0 && _config$snapshot[k]) {
        log.deprecated(`The config option \`snapshot.${k}\` will be removed in 1.0.0. ` + `Use \`discovery.${k}\` instead.`);
        map(`snapshot.${k}`, `discovery.${k}`);
      }
    }
  }
} // Validate and merge per-snapshot configuration options with global configuration options.


function getSnapshotConfig({
  url,
  name,
  // per-snapshot options
  widths,
  minHeight,
  percyCSS,
  enableJavaScript,
  discovery,
  // use a specific dom snapshot
  domSnapshot,
  // capture a fresh dom snapshot
  execute,
  waitForTimeout,
  waitForSelector,
  additionalSnapshots,
  // sdk options
  clientInfo,
  environmentInfo,
  // deprecated options
  ...deprecated
}, config, log) {
  var _widths, _widths2, _minHeight, _enableJavaScript;

  // required per-snapshot
  (0, _assert.strict)(url, 'Missing required URL for snapshot'); // override and sort widths

  widths = [...((_widths = widths) !== null && _widths !== void 0 && _widths.length ? widths : config.snapshot.widths)].sort((a, b) => a - b);
  (0, _assert.strict)((_widths2 = widths) === null || _widths2 === void 0 ? void 0 : _widths2.length, 'Missing required widths for snapshot');
  (0, _assert.strict)(widths.length <= 10, `Too many widths requested: maximum is 10, requested ${widths}`); // dom snapshot and capture options are exclusive

  if (domSnapshot != null) {
    var _Object$entries$find;

    let conflict = (_Object$entries$find = Object.entries({
      execute,
      waitForTimeout,
      waitForSelector,
      additionalSnapshots
    }).find(option => option[1] != null)) === null || _Object$entries$find === void 0 ? void 0 : _Object$entries$find[0];
    (0, _assert.strict)(!conflict, `Conflicting options: domSnapshot, ${conflict}`);
  } // discovery options have moved


  for (let k of ['authorization', 'requestHeaders']) {
    if (deprecated[k]) {
      var _discovery, _discovery$k, _discovery2;

      log.warn(`Warning: The snapshot option \`${k}\` ` + `will be removed in 1.0.0. Use \`discovery.${k}\` instead.`);
      (_discovery$k = (_discovery = (_discovery2 = discovery) !== null && _discovery2 !== void 0 ? _discovery2 : discovery = {})[k]) !== null && _discovery$k !== void 0 ? _discovery$k : _discovery[k] = deprecated[k];
    }
  } // snapshots option was renamed


  if (deprecated.snapshots) {
    var _additionalSnapshots;

    log.warn('Warning: The `snapshots` option will be ' + 'removed in 1.0.0. Use `additionalSnapshots` instead.');
    (_additionalSnapshots = additionalSnapshots) !== null && _additionalSnapshots !== void 0 ? _additionalSnapshots : additionalSnapshots = deprecated.snapshots;
  } // default name to the URL /pathname?search#hash


  if (!name) {
    let uri = new URL(url);
    name = `${uri.pathname}${uri.search}${uri.hash}`;
  } // additional snapshots must be named but allow inheritance with a prefix/suffix


  additionalSnapshots = (additionalSnapshots || []).map(({
    name: n,
    prefix = '',
    suffix = '',
    ...opts
  }) => {
    (0, _assert.strict)(n || prefix || suffix, 'Missing additional snapshot name, prefix, or suffix');
    return {
      name: n || `${prefix}${name}${suffix}`,
      ...opts
    };
  }); // concatenate percy css

  percyCSS = [config.snapshot.percyCSS, percyCSS].filter(Boolean).join('\n'); // default options

  (_minHeight = minHeight) !== null && _minHeight !== void 0 ? _minHeight : minHeight = config.snapshot.minHeight;
  (_enableJavaScript = enableJavaScript) !== null && _enableJavaScript !== void 0 ? _enableJavaScript : enableJavaScript = config.snapshot.enableJavaScript; // merge common discovery options

  discovery = (0, _normalize.merge)({
    // always allow the root hostname
    allowedHostnames: [(0, _utils.hostname)(url), ...config.discovery.allowedHostnames],
    requestHeaders: config.discovery.requestHeaders,
    authorization: config.discovery.authorization,
    disableCache: config.discovery.disableCache,
    userAgent: config.discovery.userAgent
  }, discovery);
  return {
    url,
    name,
    widths,
    minHeight,
    percyCSS,
    enableJavaScript,
    discovery,
    domSnapshot,
    execute,
    waitForTimeout,
    waitForSelector,
    additionalSnapshots,
    clientInfo,
    environmentInfo
  };
}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Finalize = void 0;

var _cliCommand = _interopRequireWildcard(require("@percy/cli-command"));

var _client = _interopRequireDefault(require("@percy/client"));

var _logger = _interopRequireDefault(require("@percy/logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Finalize extends _cliCommand.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "log", (0, _logger.default)('cli:build:finalize'));
  }

  async run() {
    if (!this.isPercyEnabled()) {
      this.log.info('Percy is disabled');
      return;
    } // automatically set parallel total to -1


    if (!process.env.PERCY_PARALLEL_TOTAL) {
      process.env.PERCY_PARALLEL_TOTAL = '-1';
    }

    let client = new _client.default(); // ensure that this command is not used for other parallel totals

    if (client.env.parallel.total !== -1) {
      this.log.error('This command should only be used with PERCY_PARALLEL_TOTAL=-1');
      this.log.error(`Current value is "${client.env.parallel.total}"`);
      return this.exit(1);
    }

    this.log.info('Finalizing parallel build...'); // rely on the parallel nonce to cause the API to return the current running build for the nonce

    let {
      data: build
    } = await client.createBuild();
    let {
      'build-number': number,
      'web-url': url
    } = build.attributes;
    await client.finalizeBuild(build.id, {
      all: true
    });
    this.log.info(`Finalized build #${number}: ${url}`);
  }

}

exports.Finalize = Finalize;

_defineProperty(Finalize, "description", 'Finalize parallel Percy builds where PERCY_PARALLEL_TOTAL=-1');

_defineProperty(Finalize, "flags", { ..._cliCommand.flags.logging
});

_defineProperty(Finalize, "examples", ['$ percy build:finalize']);